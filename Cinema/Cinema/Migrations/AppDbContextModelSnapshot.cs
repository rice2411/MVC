// <auto-generated />
using System;
using Cinema.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Cinema.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cinema.Models.Film", b =>
                {
                    b.Property<string>("filmId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("filmDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filmPoster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("timeOfFilm")
                        .HasColumnType("int");

                    b.HasKey("filmId");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            filmId = "c5e5efa6-95de-4cdc-ba85-6962dda4d688",
                            filmDescription = "Avengers: Hồi kết là phim điện ảnh siêu anh hùng Mỹ ra mắt năm 2019, do Marvel Studios sản xuất và Walt Disney Studios Motion Pictures phân phối. Phim là phần thứ tư của loạt phim Avengers, sau Biệt đội siêu anh hùng, Avengers: Đế chế Ultron và Avengers: Cuộc chiến vô cực.",
                            filmName = "End Game",
                            filmPoster = "images/endgame.jpg",
                            timeOfFilm = 182
                        },
                        new
                        {
                            filmId = "f1da2f1e-a901-4426-a439-24d865a99898",
                            filmDescription = "Chuyến tàu sinh tử là một bộ phim về đại dịch zombie của Hàn Quốc được đạo diễn bởi Yeon Sang-ho với sự tham gia các diễn viên Gong Yoo, Jung Yu-mi và Ma Dong-seok. Bộ phim đã được công chiếu trước tại khu vực Midnight Screenings tại Liên hoan phim Cannes 2016 vào ngày 13 tháng 5.",
                            filmName = "Train to Busan",
                            filmPoster = "images/busan.png",
                            timeOfFilm = 118
                        },
                        new
                        {
                            filmId = "42f5a3fd-7495-410b-9722-1c0c7e874b72",
                            filmDescription = "Phi vụ thế kỷ 2 là phim hành động Mỹ được phát hành của Jon M. Chu. Đây là phần tiếp theo của Phi vụ thế kỷ năm 2013, với sự tham gia của Jesse Eisenberg, Mark Ruffalo, Woody Harrelson, Dave Franco, Daniel Radcliffe, Lizzy Caplan, Jay Chou, Sanaa Lathan và 2 diễn viên gạo cội của Anh và Mỹ: Michael Caine và Morgan ...",
                            filmName = "NOW YOU SEE ME 2",
                            filmPoster = "images/nowyouseeme.jpg",
                            timeOfFilm = 130
                        },
                        new
                        {
                            filmId = "256c4bce-9028-42ef-927a-b12fca9a9241",
                            filmDescription = "Chơi hay Chết?, là một bộ phim kinh dị siêu nhiên năm 2018 của Mỹ được đạo diễn bởi Jeff Wadlow và được viết bởi Michael Reisz, Jillian Jacobs, Chris Roach và Wadlow.",
                            filmName = "Truth Or Dare",
                            filmPoster = "images/truth.jpg",
                            timeOfFilm = 103
                        });
                });

            modelBuilder.Entity("Cinema.Models.Room", b =>
                {
                    b.Property<string>("roomId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Seatavailable")
                        .HasColumnType("int");

                    b.Property<int>("statusRoom")
                        .HasColumnType("int");

                    b.HasKey("roomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            roomId = "R01",
                            Seatavailable = 50,
                            statusRoom = 0
                        },
                        new
                        {
                            roomId = "R02",
                            Seatavailable = 50,
                            statusRoom = 0
                        },
                        new
                        {
                            roomId = "R03",
                            Seatavailable = 50,
                            statusRoom = 0
                        },
                        new
                        {
                            roomId = "R04",
                            Seatavailable = 50,
                            statusRoom = 0
                        },
                        new
                        {
                            roomId = "R05",
                            Seatavailable = 50,
                            statusRoom = 0
                        });
                });

            modelBuilder.Entity("Cinema.Models.Screening", b =>
                {
                    b.Property<string>("screeningID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("filmId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("filmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("roomId")
                        .HasColumnType("int");

                    b.Property<DateTime>("timeEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("timeStart")
                        .HasColumnType("datetime2");

                    b.HasKey("screeningID");

                    b.ToTable("CinemaManagements");
                });

            modelBuilder.Entity("Cinema.Models.Seat", b =>
                {
                    b.Property<string>("seatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("roomId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("seatStatus")
                        .HasColumnType("int");

                    b.HasKey("seatId");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
